#
# define display information
#
name: Run JGI Metagenome Assembly Pipeline
tooltip: |
    Runs the JGI metagenome assembly pipeline from a set of Illumina Paired End reads to a finished assembly.
screenshots: []

icon: jgi_logo.png

#
# define a set of similar methods that might be useful to the user
#
suggestions:
    apps:
        related:
            []
        next:
            []
    methods:
        related:
            []
        next:
            [kb_quast/run_QUAST_app]

#
# Configure the display and description of parameters
#
parameters :
    reads_upa :
        ui-name : |
            Reads
        short-hint : |
            The Paired-End Reads to assemble
    output_assembly_name :
        ui-name : |
            Assembly Output (required)
        short-hint : |
            The name of the assembled output
    skip_rqcfilter:
        ui-name: |
            Skip RQCFilter Step
        short-hint: |
            If selected, skips running the RQCFilter step of the pipeline, which filters out adapters, low quality reads, etc. See the catalog page for details.
    cleaned_reads_name:
        ui-name: |
            Cleaned Reads Output (optional, set a name to save)
        short-hint: |
            If set, stores the processed reads as a new object. These will have been cleaned by processing with RQCFilter, BFC, and SeqTK.
    filtered_reads_name :
        ui-name: |
            Filtered Reads Output (optional, do not set if skipping RQCFilter)
        short-hint: |
            If set, this will save the RQCFiltered reads as a new Reads object. If skipping the RQCFilter step of the pipeline, do not set.

description : |
    <p>
    This is a KBase implementation of the JGI Metagenome Assembly Pipeline. From a set of paired-end reads, it will filter, correct, and assemble them through the steps described below into an Assembly object. This will also generate a report containing several files generated throughout the quality control and assembly process.
    </p>
    <p>
    During the process of filtering and cleaning the reads, and mapping the results to the assembly, several optional data objects are made. You can save these by giving them names in their respective fields, described below. If you do not name these objects, they will not be stored.
    <ul>
        <li>Cleaned Reads Output - This is the set of paired-end reads that have been filtered with RQCFilter (if that setting is used), and cleaned with BFC and SeqTK.</li>
        <li>Filtered Reads Output - This is the set of reads that have been filtered with RQCFilter. If the option to skip RQCFilter is selected and a name is given here, an error will happen and your pipeline run will not finish.
    </ul>
    <p>
    <b>Note that this pipeline currently only supports paired-end Illumina reads!</b> If you have other data you would like to use, please <a href="https://kbase.us/contact-us">contact us</a>.
    </p>
    <hr>
    <h3>Computational steps</h3>
    <p>This is an automated pipeline, with steps and parameters fixed in place. These steps are detailed below.
    <ol>
        <li>
            <p>
                <b>BBTools RQCFilter</b> Performs quality-trimming, artifact removal, linker-trimming, adapter trimming, and spike-in removal. (see the KBase-wrapped <a href="//#appcatalog/app/BBTools/RQCFilter/beta">RQCFilter app</a> for further details).
            </p>
            <p>
                <b>Parameters:</b> mlf=0.333 maxns=3 removemicrobes=t minlength=51 rna=f removecat=t removehuman=t clumpify=t minavgquality=3 trimq=0 removemouse=t phix=t qtrim=r trimfragadapter=t khist=t removedog=t  barcodefilter=f sketch=f mapk=13
            </p>
        </li>
        <li>
            <p>
                <b>BFC - bloom filter correction</b> This is a fast and easy-to-use sequencing error corrector designed for Illumina short reads. It uses a non-greedy algorithm but still maintains a speed comparable to implementations based on greedy methods. In evaluations on real data, BFC appears to correct more errors with fewer overcorrections in comparison to existing tools. It particularly does well in suppressing systematic sequencing errors, which helps to improve the base accuracy of de novo assemblies.
            </p>
            <p>
                <b>Version:</b> r181
            <p>
            <p>
                <b>Parameters:</b> -1 -k 21 -t 10
            </p>
        </li>
        <li>
            <p>
                <b>Seqtk</b> This is a fast and lightweight tool for processing sequences in the FASTA or FASTQ format. It seamlessly parses both FASTA and FASTQ files which can also be optionally compressed by gzip. It is used in this pipeline to remove orphan single end reads from the paired end library that remain after filtering and error correction.
            </p>
            <p>
                <b>Version:</b> 1.2-r101
            </p>
            <p>
                <b>Parameters:</b> uses the "dropse" subcommand
            </p>
        </li>
        <li>
            <p>
                <b>SPAdes</b> This is the tool used to assemble the reads into contigs and scaffolds. SPAdes is designed to assemble shotgun genomic and metagenomic reads, as used in the rest of this pipeline.
            </p>
            <p>
                <b>Version:</b> 3.12.0
            </p>
            <p>
                <b>Parameters:</b> --only-assembler -k 33,55,77,99,127 --meta -t 32 -m 2000
                <br>
                Note that this invokes metaSPAdes with k-mers values of 33, 55, 77, 99, and 127. A caveat here is that if your reads (after filtering and correcting) have an average length that's less than any of those k-mer values, that k-mer value won't be used. E.g., if your corrected reads have an average length of 100, the k=127 pass will be skipped.
            </p>
        </li>
        <li>
            <p>
                <b>BBTools stats.sh</b> This constructs assembly statistics from the output of SPAdes.
            </p>
            <p>
                <b>Version:</b> BBTools version 38.22
            </p>
            <p>
                <b>Parameters:</b> format=6
            </p>
        </li>
        <li>
            <p>
                <b>BBMap</b> This tool builds a coverage map of reads mapped onto the finalized assembly and generates coverage statistics.
            </p>
            <p>
                <b>Version:</b> BBTools version 38.22
            </p>
            <p>
                <b>Parameters:</b> defaults, except for the flag "ambiguous=random"
            </p>
        </li>
    </ol>

publications :
    -
        display-text: |
            Li, H. BFC: correcting Illumina sequencing errors. Bioinformatics. 2015 Sep 1;31(17):2885-7. doi: 10.1093/bioinformatics/btv290. Epub 2015 May 6.
        link: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4635656/
        pmid: 25953801
    -
        display-text: |
            Bankevich, A., Nurk S., et al. SPAdes: A New Genome Assembly Algorithm and Its Applications to Single-Cell Sequencing. J Comput Biol. 2012 May; 19(5): 455â€“477.
        link: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3342519/
        pmid: 22506599
    -
        display-text: |
            BBTools - developed by Brian Bushnell at the DoE Joint Genome Institute.
        link: https://sourceforge.net/projects/bbmap
    -
        display-text: |
            Seqtk - developed by Heng Li of the Broad Institute.
        link: https://github.com/lh3/seqtk
